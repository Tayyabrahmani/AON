mutate(across(all_of(categorical_cols), ~ str_replace_all(., " ", "_")))
# # Convert the combinations to a vector
# combination_vector <- apply(combinations, 1, paste, collapse = "")
# Create dummy variable
database <- dummy_cols(database,
select_columns = c(categorical_cols),
remove_first_dummy = FALSE,
remove_selected_columns = TRUE)
# Concatenating categorical and numerical columns
cols_to_select = c(categorical_cols, numerical_cols)
# Columns to be removed
if(length(cols_reference) > 0) {
database <- database[, -which(names(database) %in% cols_reference)]
}
#set some controls
apollo_control=list(modelName = paste(cols_to_select, collapse = ','),
modelDescr = "Player position and foot model", indivID="ID")
# Choice mapping
choice_map = c("1"="TL", "2"="TC", "3"="TR", "4"="BL", "5"="BC", "6"="BR")
# "R_slightly_left", "R_slightly_right", "R_clearly_right", "R0", "R_clearly_left"
for(i in unique(database$gk_stand)){
database[paste("R", "i")] = database["foot_R"] * database[i]
}
View(database)
View(database)
#How to implement a model in apollo and minimize the Log-likelihood Function
library(tidyverse)
library(conflicted)
library(fastDummies)
library(readxl)
library(dplyr)
library(apollo)							# run apollo package
apollo_initialise()
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
# get_interaction_combinations <- function(data, column1, column2, cols_to_remove) {
#   # Extract unique values from the specified columns
#   unique_values1 <- unique(data[[column1]])
#   unique_values2 <- unique(data[[column2]])
#   # Generate all combinations of the unique values
#   combinations <- expand.grid(unique_values1, unique_values2)
#   # Convert the combinations to a vector
#   combination_vector <- apply(combinations, 1, paste, collapse = "")
#   return(combination_vector)
# }
database <- read_excel("SixAlt.xlsx")
database <- as.data.frame(database)
database = rename(database, "player_position" = "player position", "foot" = "foot", "age" = "age", "greak_gk" = "Great GK?", "height_gk" = "Height of GK",
"location" = "Location (H-A-N)", "round" = "Round Number", "competition_grouped" = "competition grouped", "Importantness_Game" = "Importantness Game",
"Penalty_type" = "Ingame-Shootout?", "lead_deficit" = "Lead-Deficit", "minute_pars" = "Minute Pars", "decider" = "Decider?",
"shot_hard" = "Schuss hart ja nein", "ball_placed" = "Platziert?", "gk_stand" = "GK Stand", "sort_of_movement" = "Sort of Movement",
"tapped_the_ball" = "tapped the ball?", "weeks_since_last_penalty" = "in weeks")
# Add the num of penalties and cumsum to the database
Num_penalties = database %>%
group_by(Player) %>%
summarize(Num_penalties = n()) %>%
arrange(desc(Num_penalties)) %>%
mutate(Percent = Num_penalties / sum(Num_penalties) * 100,
cum_Percent = cumsum(Percent),
consider_fe = ifelse(cum_Percent <= 81, Player, "nan"))
database <- merge(database, Num_penalties[c('Player', 'consider_fe')], by.x="Player", by.y="Player")
# "consider_fe",
# categorical_cols = c("player_position", "foot", "greak_gk", "location", "round", "competition_grouped", "Importantness_Game", "Penalty_type",
#                      "minute_pars", "decider", "shot_hard", "ball_placed", "gk_stand", "sort_of_movement", "tapped_the_ball")
# numerical_cols = c("age", "height_gk", "lead_deficit", "weeks_since_last_penalty")
categorical_cols = c("player_position", "foot", "round", "competition_grouped", "Penalty_type",
"minute_pars", "shot_hard", "ball_placed", "gk_stand", "tapped_the_ball")
numerical_cols = c()
interaction_cols = c(c("foot", "gk_stand"))
cols_reference = c("consider_nan", "player_position_GK", "player_position_DF", "foot_L", "greak_gk_no", "location_N", "round_-", "competition_grouped_Friendly", "Importantness_Game_1",
"Penalty_type_Shootout", "minute_pars_-", "decider_no", "shot_hard_no", "ball_placed_no", "ball_placed_NA",
"gk_stand_central", "sort_of_movement_-", "sort_of_movement_still", "tapped_the_ball_no")
cols_with_same_beta = c()
# calculate the mode of the "shot_hard" column
mode_val <- names(which.max(table(database$shot_hard)))
# replace the missing values with the mode
database <- database %>% mutate(shot_hard = ifelse(is.na(shot_hard), mode_val, shot_hard),
ball_placed = ifelse(is.na(ball_placed), mode_val, ball_placed)
)
# Define the replacement mapping
replacement_map <- c('Final'= 'Final', 'Quarter-Final'= 'Quarter-Final', "2"= 'Group', '-'= '-', 'Group'= 'Group', 'last sixteen'= 'Group',
'Semi-Final'= 'Semi-Final', "3"= 'Group', "4"= 'Group', "1"= 'Group', 'last thirty-two'= 'Group', 'KO'= 'KO', "5"= 'Group',
'match place 3'= 'match place 3')
# Replace values in the "Category" column
database$round <- replacement_map[database$round]
# Convert categorical columns to numeric columns
database[numerical_cols] <- sapply(database[numerical_cols], as.numeric)
# apply string replacement to selected columns
database <- database %>%
mutate(across(all_of(categorical_cols), ~ str_replace_all(., " ", "_")))
# # Convert the combinations to a vector
# combination_vector <- apply(combinations, 1, paste, collapse = "")
# Create dummy variable
database <- dummy_cols(database,
select_columns = c(categorical_cols),
remove_first_dummy = FALSE,
remove_selected_columns = TRUE)
# Concatenating categorical and numerical columns
cols_to_select = c(categorical_cols, numerical_cols)
# Columns to be removed
if(length(cols_reference) > 0) {
database <- database[, -which(names(database) %in% cols_reference)]
}
#set some controls
apollo_control=list(modelName = paste(cols_to_select, collapse = ','),
modelDescr = "Player position and foot model", indivID="ID")
# Choice mapping
choice_map = c("1"="TL", "2"="TC", "3"="TR", "4"="BL", "5"="BC", "6"="BR")
exp(0.4)
prob1 <- prob2 <- prob3 <- prob4 <- prob5 <- prob6 <- 0
for(i in names(model$estimate)){
if (i == "b_asc_TL"){
prob1 = prob1 + model$estimate[i]
}
else if(substrRight(i, 1) == "2" || i == "b_asc_TC"){
if (i == "b_asc_TC"){
prob2 = prob2 + model$estimate[i]
}
else {colname = sub("2", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob2 = prob2 + calc_prob
}
}
else if(substrRight(i, 1) == "3" || i == "b_asc_TR"){
if (i == "b_asc_TR"){
prob3 = prob3 + model$estimate[i]
}
else {
colname = sub("3", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob3 = prob3 + calc_prob}
}
else if(substrRight(i, 1) == "4" || i == "b_asc_BL"){
if (i == "b_asc_BL"){
prob4 = prob4 + model$estimate[i]
}
else{
colname = sub("4", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
print("4")
prob4 = prob4 + calc_prob
}
}
else if(substrRight(i, 1) == "5" || i == "b_asc_BC"){
if (i == "b_asc_BC"){
prob5 = prob5 + model$estimate[i]
}
else{
colname = sub("5", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob5 = prob5 + calc_prob
}
}
else if(substrRight(i, 1) == "6" || i == "b_asc_BR"){
if (i == "b_asc_BR"){
prob6 = prob6 + model$estimate[i]
}
else{
colname = sub("6", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob6 = prob6 + calc_prob
}
}
}
model = BaseSpec
prob1 <- prob2 <- prob3 <- prob4 <- prob5 <- prob6 <- 0
for(i in names(model$estimate)){
if (i == "b_asc_TL"){
prob1 = prob1 + model$estimate[i]
}
else if(substrRight(i, 1) == "2" || i == "b_asc_TC"){
if (i == "b_asc_TC"){
prob2 = prob2 + model$estimate[i]
}
else {colname = sub("2", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob2 = prob2 + calc_prob
}
}
else if(substrRight(i, 1) == "3" || i == "b_asc_TR"){
if (i == "b_asc_TR"){
prob3 = prob3 + model$estimate[i]
}
else {
colname = sub("3", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob3 = prob3 + calc_prob}
}
else if(substrRight(i, 1) == "4" || i == "b_asc_BL"){
if (i == "b_asc_BL"){
prob4 = prob4 + model$estimate[i]
}
else{
colname = sub("4", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
print("4")
prob4 = prob4 + calc_prob
}
}
else if(substrRight(i, 1) == "5" || i == "b_asc_BC"){
if (i == "b_asc_BC"){
prob5 = prob5 + model$estimate[i]
}
else{
colname = sub("5", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob5 = prob5 + calc_prob
}
}
else if(substrRight(i, 1) == "6" || i == "b_asc_BR"){
if (i == "b_asc_BR"){
prob6 = prob6 + model$estimate[i]
}
else{
colname = sub("6", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob6 = prob6 + calc_prob
}
}
}
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
prob1 <- prob2 <- prob3 <- prob4 <- prob5 <- prob6 <- 0
for(i in names(model$estimate)){
if (i == "b_asc_TL"){
prob1 = prob1 + model$estimate[i]
}
else if(substrRight(i, 1) == "2" || i == "b_asc_TC"){
if (i == "b_asc_TC"){
prob2 = prob2 + model$estimate[i]
}
else {colname = sub("2", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob2 = prob2 + calc_prob
}
}
else if(substrRight(i, 1) == "3" || i == "b_asc_TR"){
if (i == "b_asc_TR"){
prob3 = prob3 + model$estimate[i]
}
else {
colname = sub("3", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob3 = prob3 + calc_prob}
}
else if(substrRight(i, 1) == "4" || i == "b_asc_BL"){
if (i == "b_asc_BL"){
prob4 = prob4 + model$estimate[i]
}
else{
colname = sub("4", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
print("4")
prob4 = prob4 + calc_prob
}
}
else if(substrRight(i, 1) == "5" || i == "b_asc_BC"){
if (i == "b_asc_BC"){
prob5 = prob5 + model$estimate[i]
}
else{
colname = sub("5", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob5 = prob5 + calc_prob
}
}
else if(substrRight(i, 1) == "6" || i == "b_asc_BR"){
if (i == "b_asc_BR"){
prob6 = prob6 + model$estimate[i]
}
else{
colname = sub("6", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob6 = prob6 + calc_prob
}
}
}
sum_prob = exp(prob1) + exp(prob2) + exp(prob3) + exp(prob4) + exp(prob5) + exp(prob6)
prob1 = prob1 / sum_prob
prob2 = prob2 / sum_prob
prob3 = prob3 / sum_prob
prob4 = prob4 / sum_prob
prob5 = prob5 / sum_prob
prob6 = prob6 / sum_prob
prob1 + prob2 +   prob1 <- prob2 <- prob3 <- prob4 <- prob5 <- prob6 <- 0
prob1 <- prob2 <- prob3 <- prob4 <- prob5 <- prob6 <- 0
for(i in names(model$estimate)){
if (i == "b_asc_TL"){
prob1 = prob1 + model$estimate[i]
}
else if(substrRight(i, 1) == "2" || i == "b_asc_TC"){
if (i == "b_asc_TC"){
prob2 = prob2 + model$estimate[i]
}
else {colname = sub("2", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob2 = prob2 + calc_prob
}
}
else if(substrRight(i, 1) == "3" || i == "b_asc_TR"){
if (i == "b_asc_TR"){
prob3 = prob3 + model$estimate[i]
}
else {
colname = sub("3", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob3 = prob3 + calc_prob}
}
else if(substrRight(i, 1) == "4" || i == "b_asc_BL"){
if (i == "b_asc_BL"){
prob4 = prob4 + model$estimate[i]
}
else{
colname = sub("4", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
print("4")
prob4 = prob4 + calc_prob
}
}
else if(substrRight(i, 1) == "5" || i == "b_asc_BC"){
if (i == "b_asc_BC"){
prob5 = prob5 + model$estimate[i]
}
else{
colname = sub("5", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob5 = prob5 + calc_prob
}
}
else if(substrRight(i, 1) == "6" || i == "b_asc_BR"){
if (i == "b_asc_BR"){
prob6 = prob6 + model$estimate[i]
}
else{
colname = sub("6", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
prob6 = prob6 + calc_prob
}
}
}
sum_prob = exp(prob1) + exp(prob2) + exp(prob3) + exp(prob4) + exp(prob5) + exp(prob6)
prob1 = exp(prob1) / sum_prob
prob2 = exp(prob2) / sum_prob
prob3 = exp(prob3) / sum_prob
prob4 = exp(prob4) / sum_prob
prob5 = exp(prob5) / sum_prob
prob6 = exp(prob6) / sum_prob
database
max(prob1,prob2)
which(max(prob1, prob2))
max(which(prob1, prob2))
max_value <- max(a, b, c)
max_value <- max(a, b, c)
a = 10
b = 15
c = 4
max_value <- max(a, b, c)
max_variable <- switch(max_value, a = "a", b = "b", c = "c")
max_variable
switch(max(a, b, c), "a", "b", "c")
print(switch(max(a, b, c), "a", "b", "c"))
print(switch(max(a, b, c), a, b, c))
probs <- setNames(rep(0, 6), c("prob1", "prob2", "prob3", "prob4", "prob5", "prob6"))
probs
probs$prob1 = 1
probs
probs[prob1] = 1
probs
probs[prob2] = 1
probs
probs["prob2"] = 1
probs
apply(probs, exp)
sum(sapply(probs[c("prob1", "prob2", "prob3")], exp))
sum(exp(probs["prob1"]) + exp(probs["prob2"]) + exp(probs["prob3"]))
exp(probs["prob1"])
probs["prob1"]
dtype(probs["prob1"])
type(probs["prob1"])
probs["prob1"]
View(probs)
sum(sapply(probs[c("prob1", "prob2", "prob3")], exp))
probs <- setNames(rep(0, 6), c("prob1", "prob2", "prob3", "prob4", "prob5", "prob6"))
for(i in names(model$estimate)){
if (i == "b_asc_TL"){
probs["prob1"] = probs["prob1"] + model$estimate[i]
}
else if(substrRight(i, 1) == "2" || i == "b_asc_TC"){
if (i == "b_asc_TC"){
probs["prob2"] = probs["prob2"] + model$estimate[i]
}
else {colname = sub("2", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob2"] = probs["prob2"] + calc_prob
}
}
else if(substrRight(i, 1) == "3" || i == "b_asc_TR"){
if (i == "b_asc_TR"){
probs["prob3"] = probs["prob3"] + model$estimate[i]
}
else {
colname = sub("3", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob3"] = probs["prob3"] + calc_prob}
}
else if(substrRight(i, 1) == "4" || i == "b_asc_BL"){
if (i == "b_asc_BL"){
probs["prob4"] = probs["prob4"] + model$estimate[i]
}
else{
colname = sub("4", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob4"] = probs["prob4"] + calc_prob
}
}
else if(substrRight(i, 1) == "5" || i == "b_asc_BC"){
if (i == "b_asc_BC"){
probs["prob5"] = probs["prob5"] + model$estimate[i]
}
else{
colname = sub("5", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob5"] = probs["prob5"] + calc_prob
}
}
else if(substrRight(i, 1) == "6" || i == "b_asc_BR"){
if (i == "b_asc_BR"){
probs["prob6"] = probs["prob6"] + model$estimate[i]
}
else{
colname = sub("6", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob6"] = probs["prob6"] + calc_prob
}
}
}
probs
sum_prob = sum(sapply(probs[c("prob1", "prob2", "prob3", "prob4", "prob5", "prob6")], exp))
sum_prob
exp(probs["prob1"]) / sum_prob
probs / sum_prob
exp(probs) / sum_prob
which.max(exp(probs)/sum_prob)
names(which.max(exp(probs)/sum_prob))
probs <- setNames(rep(0, 6), c("prob1", "prob2", "prob3", "prob4", "prob5", "prob6"))
for(i in names(model$estimate)){
if (i == "b_asc_TL"){
probs["prob1"] = probs["prob1"] + model$estimate[i]
}
else if(substrRight(i, 1) == "2" || i == "b_asc_TC"){
if (i == "b_asc_TC"){
probs["prob2"] = probs["prob2"] + model$estimate[i]
}
else {colname = sub("2", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob2"] = probs["prob2"] + calc_prob
}
}
else if(substrRight(i, 1) == "3" || i == "b_asc_TR"){
if (i == "b_asc_TR"){
probs["prob3"] = probs["prob3"] + model$estimate[i]
}
else {
colname = sub("3", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob3"] = probs["prob3"] + calc_prob}
}
else if(substrRight(i, 1) == "4" || i == "b_asc_BL"){
if (i == "b_asc_BL"){
probs["prob4"] = probs["prob4"] + model$estimate[i]
}
else{
colname = sub("4", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob4"] = probs["prob4"] + calc_prob
}
}
else if(substrRight(i, 1) == "5" || i == "b_asc_BC"){
if (i == "b_asc_BC"){
probs["prob5"] = probs["prob5"] + model$estimate[i]
}
else{
colname = sub("5", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob5"] = probs["prob5"] + calc_prob
}
}
else if(substrRight(i, 1) == "6" || i == "b_asc_BR"){
if (i == "b_asc_BR"){
probs["prob6"] = probs["prob6"] + model$estimate[i]
}
else{
colname = sub("6", "", (sub("b_", "", names(model$estimate[i]))))
calc_prob = sum(model$estimate[i] * database[colname])
probs["prob6"] = probs["prob6"] + calc_prob
}
}
}
sum_prob = sum(sapply(probs[c("prob1", "prob2", "prob3", "prob4", "prob5", "prob6")], exp))
names(which.max(exp(probs) / sum_prob))
library(shiny)
library(shinythemes)
library(readxl)
library(tidyverse)
library(fastDummies)
library(dplyr)
library(apollo)
library(shinyjs)
source("forecast_function.R")
source("utils_func.R")
