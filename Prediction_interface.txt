library(shiny)
library(shinythemes)
library(readxl)
library(tidyverse)
library(shinyjs)

# Define the UI
ui <- fluidPage(
  useShinyjs(),
  tags$head(
    tags$link(
      rel = "stylesheet",
      href = "https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
    ),
    tags$style(
      HTML("
        .goal-post {
          width: 600px;
          height: 400px;
          border: 2px solid #000;
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          grid-template-rows: repeat(2, 1fr);
          gap: 10px;
          padding: 10px;
          box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
          background-color: #FFF;
        }

        .goal-box {
          background-color: #FFF;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 16px;
          font-weight: bold;
          border: 2px solid #000;
        }

        .highlight {
          background-color: #FFD700;
        }

        .dropdown-panels {
          display: flex;
          justify-content: space-between;
          align-items: baseline;
          margin-bottom: 20px;
          background-color: #FFCC99;
          padding: 15px;
          overflow: auto;
          position: fixed; 
          top: 0;
          left: 0;
          width: 100%;
        }

        .main-content {
          margin-top: 60px; /* Adjust the margin to create space between container and goal-post */
        }
      ")
    )
  ),
  
  navbarPage(
    theme = shinytheme("united"),
    title = "Penalty Kick Prediction",
    tabPanel(
      "Prediction",
      sidebarPanel(
        selectizeInput("player", "Player", choices = NULL),
        selectizeInput("gk", "GK", choices = NULL),
        selectizeInput("location", "Location", choices = NULL),
        selectizeInput("lead_deficit", "Lead-Deficit", choices = NULL),
        selectizeInput("minute_pars", "Minute Pars", choices = NULL),
        selectizeInput("competition_grouped", "Competition", choices = NULL),
        selectizeInput("Importantness_Game", "Game Importance", choices = NULL),
        selectizeInput("gk_stand", "GK_stand", choices = NULL),
        selectizeInput("sort_of_movement", "GK Movement Type", choices = NULL),
        selectizeInput("decider", "Decider", choices = NULL),
        selectizeInput("shot_hard", "Is the shot Powerful", choices = NULL),
        selectizeInput("greak_gk", "Is he a Greek GK", choices = NULL),
        selectizeInput("opponent", "Opponent", choices = NULL),
        selectInput("penalty_type", "Penalty Type",
                    choices = c("Penalty Shootout", "In-Game Penalty")),
        actionButton("predict_btn", "Predict", class = "btn btn-primary")
      ),
      mainPanel(
        h3("Penalty Kick Prediction"),
        div(class = "goal-post",
            div(class = "goal-box", id = "TL", "TL"),
            div(class = "goal-box", id = "TC", "TC"),
            div(class = "goal-box", id = "TR", "TR"),
            div(class = "goal-box", id = "BL", "BL"),
            div(class = "goal-box", id = "BC", "BC"),
            div(class = "goal-box", id = "BR", "BR")
        ),
        textOutput("prediction_output")
      )
    )
  )
)

# Define the server logic
server <- function(input, output, session) {
  # Read the data from the Excel file
  data <- reactive({
    req(file.exists("SixAlt.xlsx"))
    database <- read_excel("SixAlt.xlsx")
    database <- as.data.frame(database)
    database <- rename(database, "player_position" = "player position",
                       "gk_stand" = "GK Stand", "sort_of_movement" = "Sort of Movement",
                       "competition_grouped" = "competition grouped", "Importantness_Game" = "Importantness Game",
                       "lead_deficit" = "Lead-Deficit", "minute_pars" = "Minute Pars",
                       "location" = "Location (H-A-N)", "Penalty_type" = "Ingame-Shootout?",
                       "decider" = "Decider?", "shot_hard" = "Schuss hart ja nein",
                       "greak_gk" = "Great GK?")
    return(database)
  })
  
  # Update the select inputs based on the data
  observeEvent(data(), {
    updateSelectizeInput(session, "player", choices = unique(data()$Player))
    updateSelectizeInput(session, "gk", choices = unique(data()$GK))
    updateSelectizeInput(session, "opponent", choices = unique(data()$Opponent))
    updateSelectizeInput(session, "location", choices = unique(data()$location))
    updateSelectizeInput(session, "lead_deficit", choices = unique(data()$lead_deficit))
    updateSelectizeInput(session, "minute_pars", choices = unique(data()$minute_pars))
    updateSelectizeInput(session, "competition_grouped", choices = unique(data()$competition_grouped))
    updateSelectizeInput(session, "Importantness_Game", choices = unique(data()$Importantness_Game))
    updateSelectizeInput(session, "sort_of_movement", choices = unique(data()$sort_of_movement))
    updateSelectizeInput(session, "decider", choices = unique(data()$decider))
    updateSelectizeInput(session, "shot_hard", choices = unique(data()$shot_hard))
    updateSelectizeInput(session, "gk_stand", choices = unique(data()$gk_stand))
    updateSelectizeInput(session, "greak_gk", choices = unique(data()$greak_gk))
    updateSelectInput(session, "penalty_type", choices = unique(data()$Penalty_type))
  })
  
  # Function to predict the penalty kick direction
  predictKickDirection <- function(player, gk, opponent, penalty_type, game_time) {
    # Perform your prediction logic here based on the inputs and the data
    # Replace the code below with your own prediction algorithm
    
    kick_direction <- sample(c("TL", "TC", "TR", "BL", "BC", "BR"), 1)
    
    return(kick_direction) 
  }
  
  # Reactively predict the kick direction when the predict button is clicked
  observeEvent(input$predict_btn, {
    player <- input$player
    gk <- input$gk
    opponent <- input$opponent
    penalty_type <- input$penalty_type
    game_time <- input$game_time
    
    # Call the predictKickDirection function to get the prediction
    prediction <- predictKickDirection(player, gk, opponent, penalty_type, game_time)
    
    # Display the prediction in the output text
    output$prediction_output <- renderText(paste("Predicted kick direction:", prediction))
    
    # Highlight the box based on the prediction
    updateGoalBox(prediction)
  })
  
  # Function to update the goal box highlighting
  updateGoalBox <- function(prediction) {
    # Reset the highlighting on all goal boxes
    for (box_id in c("TL", "TC", "TR", "BL", "BC", "BR")) {
      removeCssClass(box_id, "highlight")
    }
    
    # Highlight the predicted goal box
    addCssClass(prediction, "highlight")
  }
  
  # Helper function to add a CSS class to an element
  addCssClass <- function(element_id, class_name) {
    runjs(paste0("document.getElementById('", element_id, "').classList.add('", class_name, "');"))
  }
  
  # Helper function to remove a CSS class from an element
  removeCssClass <- function(element_id, class_name) {
    runjs(paste0("document.getElementById('", element_id, "').classList.remove('", class_name, "');"))
  }
  
}

# Run the app
shinyApp(ui, server)
